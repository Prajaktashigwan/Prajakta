{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fbf9ae7e",
   "metadata": {},
   "source": [
    "# Question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "899d3950",
   "metadata": {},
   "source": [
    "To get every element in matrix after multiplication we multiply one row of 1st matrix with one column of other matrix. hence no of multiplications will be equal to no of elements present in row or column (as elements in row and column will be always same to perform matrix multiplication). no of addition for these pairs multiplication will be = (total no pairs - 1). It means in our case for (n,k) and (k,m) matrices 'k' will be no. of multiplications and (k-1) will be no of additions to get single elememnt answer matrix. Total number of elements present in answer matrix will be (n,m) i.e. n* m hence, \n",
    "Total no of multiplications = k* (n * m)  \n",
    "Total no. of addtions = (k-1)* (n * m) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1127326",
   "metadata": {},
   "source": [
    "# Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "760237df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A =[[114, 160, 0], [74, 97, 0], [119, 157, 0]]\n",
      "total time taken using lists of list:  1.5647411346435547 ms\n"
     ]
    }
   ],
   "source": [
    "#solved using lists of list\n",
    "import numpy as np\n",
    "import time \n",
    "\n",
    "start = time.time()\n",
    "\n",
    "# defining matrices\n",
    "Matrix1 = [[12,7,3],[4 ,5,6],[7 ,8,9]]\n",
    "Matrix2 = [[5,8],[6,7],[4,5]]\n",
    "\n",
    "# defining ans matrix A\n",
    "A =[[0 for x in range(3)] for y in range(3)]\n",
    "\n",
    "# solving multiplication\n",
    "for i in range(len(Matrix1[0])):\n",
    "    for j in range(len(Matrix2[0])):\n",
    "        for k in range(len(Matrix1)):\n",
    "            A[i][j] += Matrix1[i][k] * Matrix2[k][j]\n",
    "            \n",
    "end = time.time()\n",
    "\n",
    "print('A ='+ str(A))\n",
    "print(\"total time taken using lists of list: \",(end-start)* 10**3, \"ms\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2d5ad915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A =[[114 160]\n",
      " [ 74  97]\n",
      " [119 157]]\n",
      "total time taken using numpy :  1.5134811401367188 ms\n"
     ]
    }
   ],
   "source": [
    "#solved using numpy\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "# defining matrices\n",
    "Mat1 = [[12,7,3],[4 ,5,6],[7 ,8,9]]\n",
    "Mat2 = [[5,8],[6,7],[4,5]]\n",
    "\n",
    "Ans = np.dot(Mat1,Mat2)\n",
    "print('A ='+ str(Ans))\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "print(\"total time taken using numpy : \",(end-start)* 10**3, \"ms\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd9a32c2",
   "metadata": {},
   "source": [
    " Time required to solve using lists of list is(1.5647411346435547 ms) more than time required to solve using numpy module (1.5134811401367188 ms) i.e. numpy is faster. numpy is a module which has inbuilt matrix multiplication command hence less lines of code causes less time using numpy. \n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1e88b5d",
   "metadata": {},
   "source": [
    "# Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "94d4ea0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median using highest element method: 72\n",
      "total time taken using highest element method:  5.778312683105469 ms\n"
     ]
    }
   ],
   "source": [
    "# solved by using histest element method\n",
    "import numpy as np\n",
    "import time as t\n",
    "start=t.time()\n",
    "\n",
    "# defining function to get median\n",
    "def median(A):\n",
    "    M =[]\n",
    "    while len(A) > 0:\n",
    "        A_max = max(A) \n",
    "        I_max = np.where(A == A_max)[0]\n",
    "        Abar = A[I_max]\n",
    "        A = np.delete(A,I_max)\n",
    "        M.extend(Abar)\n",
    "    \n",
    "    if len(M)%2 != 0:\n",
    "        I = (len(M)-1)//2\n",
    "        med = M[I]\n",
    "    else:\n",
    "        I1 = len(M)//2\n",
    "        I2 = I1-1\n",
    "        med = (M[I1]+M[I2])/2\n",
    "        \n",
    "    return(med)\n",
    "\n",
    "# giving input array\n",
    "A = np.array([88,81,35,41,40,100,83,64,72])\n",
    "end=t.time()\n",
    "\n",
    "# getting median\n",
    "print('median using highest element method: '+str(median(A)))\n",
    "print(\"total time taken using highest element method: \",(end-start)* 10**3, \"ms\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5d2931cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median using sort method: 72\n",
      "total time taken by using sort method:  0.5075931549072266 ms\n"
     ]
    }
   ],
   "source": [
    "# another methad to get median using sort function\n",
    "import time\n",
    "\n",
    "start=time.time()\n",
    "\n",
    "# sorting given array\n",
    "A = [88,81,35,41,40,100,83,64,72]\n",
    "A.sort()\n",
    "\n",
    "# finding median of sorted array\n",
    "if len(A)%2 != 0:\n",
    "    I = (len(A)-1)//2\n",
    "    med = A[I]\n",
    "else:\n",
    "    I1 = len(A)//2\n",
    "    I2 = I1-1\n",
    "    med = (A[I1]+A[I2])/2\n",
    "    \n",
    "end=time.time()\n",
    "\n",
    "print('median using sort method: '+str(med))\n",
    "print(\"total time taken by using sort method: \",(end-start)*10**3, \"ms\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "52a84a3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median using numpy.median: 72.0\n",
      "total time taken using np.median:  8.174896240234375 ms\n"
     ]
    }
   ],
   "source": [
    "# using numpy.median\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "start=time.time()\n",
    "A = [88,81,35,41,40,100,83,64,72] \n",
    "Me = np.median(A)\n",
    "end=time.time()\n",
    "\n",
    "print('median using numpy.median: '+str(Me))\n",
    "print(\"total time taken using np.median: \",(end-start)* 10**3, \"ms\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14570fbd",
   "metadata": {},
   "source": [
    "from above three methods we are getting same ans.\n",
    "\n",
    "By comparing execution time, \n",
    "\n",
    "time taken using highest element method:  5.778312683105469 ms\n",
    "\n",
    "time taken by using sort method:  0.5075931549072266 ms\n",
    "\n",
    "time taken using np.median:  8.174896240234375 ms\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e3f8b3b",
   "metadata": {},
   "source": [
    "# Question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ff622af",
   "metadata": {},
   "source": [
    "gradient = [ (df/dx), (df/dy) ]\n",
    "         = [ (2xy + y^3*cos(theta)) , (3.x^2.y^2.sin(theta)) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f0f4a482",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.5838492667355437, 6.727890799080092]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math as m\n",
    "\n",
    "def gradxy(f, x,index=[]):\n",
    "    e = 2.34E-10\n",
    "    grads = []\n",
    "    for idx in index:\n",
    "        x_ = x.copy()\n",
    "        x_[idx]+=e\n",
    "        grads.append((f(x_) - f(x))/e)\n",
    "    return grads\n",
    "\n",
    "def f(x):\n",
    "    return((x[0]**2*x[1])+(x[1]**3*m.sin(x[0])))\n",
    "x = [2,1]\n",
    "index=[0, 1]\n",
    "\n",
    "print(gradxy(f, x,index))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18bbbf7e",
   "metadata": {},
   "source": [
    "# Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0d5b59b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# using jax\n",
    "# import jax\n",
    "# import numpy as np\n",
    "# import jax.numpy as jnp\n",
    "\n",
    "# from jax import grad\n",
    "# from jax import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37d9c2e1",
   "metadata": {},
   "source": [
    "# Question 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1b0ef525",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2*x*y + y**3*cos(x), x**2 + 3*y**2*sin(x)]\n"
     ]
    }
   ],
   "source": [
    "# solved using sympy\n",
    "\n",
    "import sympy as sy\n",
    "\n",
    "# defining symbolic variables\n",
    "x,y = sy.symbols('x y')\n",
    "\n",
    "# defining function\n",
    "func = (x**2*y)+(y**3*sy.sin(x))\n",
    "\n",
    "# solved using diff\n",
    "A=sy.diff(func,x)\n",
    "B=sy.diff(func,y)\n",
    "\n",
    "# A1=sy.diff(func,x).subs([(x,1),(y,1)])\n",
    "# B1=sy.diff(func,y).subs([(x,1),(y,1)])\n",
    "\n",
    "print([A,B])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59938f11",
   "metadata": {},
   "source": [
    "by sympy also we are getting same gradient."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526db1ec",
   "metadata": {},
   "source": [
    " #  Question 7 & 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc19b59a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining nested dictionary as per given in Q 7 and Q 8\n",
    "\n",
    "nest_Dict = {2022 : {'Branch-1': {'roll number': 1, 'Name': 'N', 'Marks':{'Maths':100,'English':70}},'Branch-2': {'roll number': 1,'Name': 'N','Marks':{'Maths':100,'English':70}}},\n",
    "        2023 : {'Branch-1': {'roll number': 1, 'Name': 'N', 'Marks':{'Maths':100,'English':70}},'Branch-2': {'roll number': 1,'Name': 'N','Marks':{'Maths':100,'English':70}}},\n",
    "        2024 : {'Branch-1': {'roll number': 1, 'Name': 'N', 'Marks':{'Maths':100,'English':70}},'Branch-2': {'roll number': 1,'Name': 'N','Marks':{'Maths':100,'English':70}}},\n",
    "        2025 : {'Branch-1': {'roll number': 1, 'Name': 'N', 'Marks':{'Maths':100,'English':70}},'Branch-2': {'roll number': 1,'Name': 'N','Marks':{'Maths':100,'English':70}}},\n",
    "       }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4382e87a",
   "metadata": {},
   "source": [
    "# Question 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2854af70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# defining range of x\n",
    "x = np.arange(0.5,100,0.5)\n",
    "\n",
    "# function 1\n",
    "y =x\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "07a5c498",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 2\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y =x**2\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2316ee9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 3\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y =x**3/100\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "137882a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 4\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y = np.sin(x)\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e6d683de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 5\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y = np.sin(x)/x\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7bea3dd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 6\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y = np.log(x)\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e921eecc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# function 7\n",
    "\n",
    "x = np.arange(0.5,100,0.5)\n",
    "y = np.exp(x)\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33bf02a6",
   "metadata": {},
   "source": [
    "# Question 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e79039c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           a         b         c         d         e\n",
      "0   1.159435  1.606674  1.284883  1.497532  1.216401\n",
      "1   1.997148  2.687349  2.309959  1.686358  1.987651\n",
      "2   2.745717  2.633051  1.250483  1.274182  2.165769\n",
      "3   1.183331  2.768515  1.403124  1.214249  1.423954\n",
      "4   2.414881  2.289925  2.443732  1.942188  1.066212\n",
      "5   2.363612  2.189483  2.757562  1.906292  1.593694\n",
      "6   1.498367  2.878667  2.765482  1.825348  1.874464\n",
      "7   1.470542  2.968503  2.361629  1.484801  2.138235\n",
      "8   2.985378  2.464665  2.078887  2.910143  1.748554\n",
      "9   1.426457  2.868534  1.271341  2.220857  1.066823\n",
      "10  2.121561  1.550682  2.888656  1.146557  2.135503\n",
      "11  1.424976  2.294421  2.823648  1.158072  1.869251\n",
      "12  2.726156  2.469768  2.736784  2.872563  1.833527\n",
      "13  1.343821  1.584826  1.062593  1.988299  1.085009\n",
      "14  2.365184  2.725597  1.974834  2.993495  2.509667\n",
      "15  1.722205  2.804415  2.763796  1.817262  1.063785\n",
      "16  2.690217  1.100283  2.286216  1.371117  1.692202\n",
      "17  1.382958  2.600849  1.588926  1.281167  1.521300\n",
      "18  2.062873  1.677019  1.893567  2.479265  1.458832\n",
      "19  2.270978  2.990746  1.768404  2.533157  2.122379\n",
      " std deviation of all columns: \n",
      "a    0.584602\n",
      "b    0.560612\n",
      "c    0.615279\n",
      "d    0.608633\n",
      "e    0.434235\n",
      "dtype: float64\n",
      " max std deviation of column is :0.6152791651248714\n",
      " mean values of all rows: \n",
      "0     1.352985\n",
      "1     2.133693\n",
      "2     2.013840\n",
      "3     1.598635\n",
      "4     2.031387\n",
      "5     2.162129\n",
      "6     2.168466\n",
      "7     2.084742\n",
      "8     2.437525\n",
      "9     1.770803\n",
      "10    1.968592\n",
      "11    1.914073\n",
      "12    2.527760\n",
      "13    1.412910\n",
      "14    2.513755\n",
      "15    2.034293\n",
      "16    1.828007\n",
      "17    1.675040\n",
      "18    1.914311\n",
      "19    2.337133\n",
      "dtype: float64\n",
      " minimum mean is of [0]th row and its value is 1.3529849369495983\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "#generating matrix of 20*5\n",
    "M1 = np.random.uniform(low=1, high=3, size=(20,5))\n",
    "\n",
    "#creating dataframe with column values\n",
    "column_values=['a','b','c','d','e']\n",
    "df = pd.DataFrame(data=M1, columns = column_values)\n",
    "print(df)\n",
    "\n",
    "# column wise std deviation\n",
    "print(\" std deviation of all columns: \")\n",
    "print(df.std())\n",
    "\n",
    "# max std deviation\n",
    "print(\" max std deviation of column is :\" + str(np.max(df.std())))\n",
    "\n",
    "# row weise mean\n",
    "print(\" mean values of all rows: \")\n",
    "print(df.mean(axis=1))\n",
    "\n",
    "# min mean value of row\n",
    "i=df[df.mean(axis=1) == df.mean(axis=1).min()].index.values\n",
    "print(\" minimum mean is of \"+ str(i) +\"th row and its value is \"+str(np.min(df.mean(axis=1))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f237ab4",
   "metadata": {},
   "source": [
    "# Question 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "09da18e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           a         b         c         d         e          f    g\n",
      "0   1.447091  2.471748  2.831757  1.648857  2.139557  10.539009  GT8\n",
      "1   1.065876  1.283230  1.104259  1.379412  2.999987   7.832764  LT8\n",
      "2   2.107706  2.083213  2.481850  2.929377  1.607180  11.209327  GT8\n",
      "3   1.884992  1.198198  1.700488  2.912877  1.395256   9.091811  GT8\n",
      "4   1.664016  2.576144  1.556733  2.473809  1.326680   9.597382  GT8\n",
      "5   1.771185  2.809815  1.741884  2.229717  1.362720   9.915321  GT8\n",
      "6   2.689382  1.720126  1.970703  2.485510  1.395693  10.261414  GT8\n",
      "7   2.143735  1.217852  2.008839  1.137583  1.045393   7.553402  LT8\n",
      "8   2.436840  2.078008  2.312387  2.114988  2.328533  11.270756  GT8\n",
      "9   2.060814  1.319472  1.252899  2.987378  2.279564   9.900127  GT8\n",
      "10  1.121565  2.652222  2.980991  1.975544  2.802915  11.533238  GT8\n",
      "11  2.985988  2.831458  1.847616  1.691445  1.042805  10.399312  GT8\n",
      "12  1.009609  2.869912  1.547381  1.705035  1.726945   8.858882  GT8\n",
      "13  2.852633  2.512208  1.563310  1.509799  1.102867   9.540817  GT8\n",
      "14  2.001591  1.544887  1.469826  1.139727  1.245749   7.401781  LT8\n",
      "15  1.413125  2.813479  1.194815  1.510934  1.964675   8.897028  GT8\n",
      "16  2.347278  2.939231  1.155292  2.131296  2.314308  10.887406  GT8\n",
      "17  2.738390  2.884935  2.986837  1.955931  1.805229  12.371322  GT8\n",
      "18  2.970232  1.320723  1.483137  1.530593  2.442134   9.746819  GT8\n",
      "19  1.117091  2.838443  2.607549  2.669181  2.182357  11.414622  GT8\n",
      "No of rows having value LT8 = 3\n",
      "std deviation for GT8 and LT8 of \"f\" column:            f\n",
      "g            \n",
      "GT8  1.012997\n",
      "LT8  0.218624\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# previous dataframe\n",
    "M1 = np.random.uniform(low=1, high=3, size=(20,5))\n",
    "column_values=['a','b','c','d','e']\n",
    "df = pd.DataFrame(data=M1, columns = column_values)\n",
    "\n",
    "#adding column 'f' with sum of all columns\n",
    "df1 = df.assign(f = df.sum(axis=1))\n",
    "\n",
    "#adding column 'g' to categorised values as per condition\n",
    "df1['g'] = np.where(df1['f']<= 8, 'LT8', 'GT8')\n",
    "print(df1)\n",
    "\n",
    "#counting np. of rows having 'LT8' as per clmn 'g'\n",
    "Total = np.where(df1['g']== 'LT8', 1, 0).sum()\n",
    "print('No of rows having value LT8 = '+str(Total))\n",
    "\n",
    "#calculating std dev of column 'f' for all 'LT8' and 'GT8'\n",
    "df_1 = df1.loc[:, [\"f\", \"g\"]]\n",
    "STD = df_1.groupby('g', axis=0).std()\n",
    "print('std deviation for GT8 and LT8 of \"f\" column:' + str(STD))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b58f920",
   "metadata": {},
   "source": [
    "# Question 12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbcdf13c",
   "metadata": {},
   "source": [
    "broadcasting shows arithmatic operations done by different diamensional arrays. For operation two arrays should have same rank or one of the array should have single element."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "998a32f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A = [ 6 45 63 42 10]\n",
      "B = [ 6 15 27 21 15]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# defining two arrays\n",
    "A1 = np.array([2,5,9,7,5])\n",
    "A2 = np.array([3,9,7,6,2])\n",
    "#A1 and A2 having same rank\n",
    "A = A1 * A2\n",
    "print('A = '+str(A))\n",
    "\n",
    "#A1 and A2 having same rank\n",
    "B1 = np.array([2,5,9,7,5])\n",
    "B2 = 3\n",
    "B = B1 * B2\n",
    "print('B = '+str(B))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61e6cb9c",
   "metadata": {},
   "source": [
    "# Question 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "fb496814",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index values using argmin = 2\n",
      "index values using function = 2\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# using argmin\n",
    "in_Array = [88,81,35,41,40,100,83,64,72]\n",
    "I_min = np.argmin(in_Array, axis=0)\n",
    "print('index values using argmin = '+str(I_min))\n",
    "\n",
    "#defining function\n",
    "i = 0\n",
    "j = 1\n",
    "def minimum(A):\n",
    "    for i in list(range(len(A))):\n",
    "        for j in list(range(len(A))):\n",
    "            if A[i] < A[j]:\n",
    "                I_min = i\n",
    "            else:\n",
    "                I_min = j\n",
    "                i = j\n",
    "            \n",
    "    return(I_min)\n",
    "A = [88,81,35,41,40,100,83,64,72]\n",
    "print('index values using function = '+str(minimum(A)))\n",
    "         "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1f4ae4",
   "metadata": {},
   "source": [
    "by both ways we are getting same answers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8677a435",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
